local_costmap:
  #We'll publish the voxel grid used by this costmap - how about no
#  publish_voxel_map: true

  #Set the global and robot frames for the costmap
  global_frame:     /odom
  robot_base_frame: base_link

  #Set the update and publish frequency of the costmap
  update_frequency:  20.0
  publish_frequency: 20.0

  #We'll configure this costmap to be a rolling window... meaning it is always
  #centered at the robot
  static_map:     False
  rolling_window: True
  width:  30.0
  height: 20.0
  # NOTE: Changing resolution impacts safezone (search for the string "0.35" (or "35") in code)
  # resolution: 0.35
  resolution: 0.1
  origin_x: 0.0
  origin_y: 0.0
  # TODO
#  origin_x: -15.0
#  origin_y: -10.0

# === EVERYTHING past thing point is the old config (before Zach moved things around...) ===
## TODO this footprint is redundant with costmap_common_params footprint
##footprint: [[1.9384, -0.6096], [1.9384, 0.6096], [-0.5, 0.6096], [-0.5, -0.6096]]
#
#plugins:
## - {name: static_layer,         type: "costmap_2d::StaticLayer"}
#- {name: inflation_layer,    type: "costmap_2d::InflationLayer"}
#- {name: obstacle_layer,     type: "costmap_2d::ObstacleLayer"}
#
#global_frame: base_link
## robot_base_frame: base_link
#
#transform_tolerance: 0.5
## resolution: 0.35
#resolution: 0.1
#
#update_frequency: 20.0
#publish_frequency: 20.0
#
#rolling_window: true
#static_map: false
#
#width: 30.0
#height: 20.0
#
## origin_x: 0.0
## origin_y: 0.0
#
## static_layer:
##     enabled: true
#
#inflation_layer:
#    enabled: false
#    cost_scaling_factor:    0.1    # exponential rate at which the obstacle cost drops off (default: 10)
#    inflation_radius:         0.5    # max. distance from an obstacle at which costs are incurred for planning paths.
#
#obstacle_layer:
#    enabled: true
#    observation_sources: unsafe_zone safe_zone velodyne_obstacles velodyne_clear laser_scan_sensor
#    unsafe_zone: {sensor_frame: camera, data_type: PointCloud2, topic: unsafezone_pc, marking: true, clearing: true}
#    safe_zone: {sensor_frame: camera, data_type: PointCloud2, topic: safezone_pc, marking: false, clearing: true}
#    velodyne_obstacles: {sensor_frame: heightmap, data_type: PointCloud2, topic: velodyne_obstacles, marking: true, clearing: true}
#    velodyne_clear: {sensor_frame: heightmap, data_type: PointCloud2, topic: velodyne_clear, marking: false, clearing: true}
#    laser_scan_sensor: {sensor_frame: laser, data_type: LaserScan, topic: scan, marking: true, clearing: true}
#
#    combination_method: 1
#    footprint_clearing_enabled: true
#    raytrace_range: 10.0
#    obstacle_range: 8.0
